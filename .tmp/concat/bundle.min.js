/*global $editor $menubar*/
var np = {};

np.config = {
  'appContainer': '.notepad-app'
};

np.bWrap          = false;
np.fontFamily     = 'Arial';
np.fontStype      = '常规';

np.fontSize       = '16';

np.fontHandler = function(e) {
  np.fontFamily = e.family;
  np.fontStype = e.style;
  np.fontSize = e.size;
  
  $editor.setFont(e);
};

$(function() {
  $menubar.show(np.menuData);
  $editor.show();
  $editor.setFont({
    family: np.fontFamily,
    style: np.fontStype,
    size: np.fontSize
  });
  
  var $app = $('body');
  
  $app.click(function() {
    $menubar.hideMenu();
    $editor.focus();
  });
});

/*exported $menubar*/
/*global np $dlgFont*/
var $menubar = (function() {
  np.menuData = [
    { 
      title: '文件(F)',
      menuItems: [
        {
          title: '新建(N)',
          shortcut: 'Ctrl+N',
          enabled: true
        },
        {
          title: '打开(O)...',
          shortcut: 'Ctrl+O',
          enabled: true
        },
        {
          title: '保存(S)',
          shortcut: 'Ctrl+S',
          enabled: true
        },
        {
          title: 'hr',
          shortcut: '',
          enabled: true,
          handler: null
        },
        {
          title: '页面设置(U)...',
          shortcut: '',
          enabled: true
        },
        {
          title: '打印(P)...',
          shortcut: 'Ctrl+P',
          enabled: true
        },
        {
          title: 'hr',
          shortcut: '',
          enabled: true,
          handler: null
        },
        {
          title: '退出(X)',
          shortcut: '',
          enabled: true
        }
      ],
      width: '202px',
      left: '0px'
    },
    { 
      title: '编辑(E)',
      menuItems: [
        {
          title: '撤销(U)',
          shortcut: 'Ctrl+Z',
          enabled: false
        },
        {
          title: 'hr',
          shortcut: '',
          enabled: true,
        },
        {
          title: '剪切(T)',
          shortcut: 'Ctrl+X',
          enabled: true
        },
        {
          title: '复制(C)',
          shortcut: 'Ctrl+C',
          enabled: false
        },
        {
          title: '粘贴(P)',
          shortcut: 'Ctrl+V',
          enabled: false
        },
        {
          title: '删除(L)',
          shortcut: 'Del',
          enabled: false
        },
        {
          title: 'hr',
          shortcut: '',
          enabled: true
        },
        {
          title: '查找(F)...',
          shortcut: 'Ctrl+F',
          enabled: false
        },
        {
          title: '替换(R)...',
          shortcut: 'Ctrl+H',
          enabled: true
        },
        {
          title: 'hr',
          enabled: true
        },
        {
          title: '全选(A)',
          shortcut: 'Ctrl+A',
          enabled: true
        }
      ],
      width: '218px',
      left: '52px'
    },
    { 
      title: '格式(O)',
      menuItems: [
        {
          title:'自动换行',
          shortcut:'',
          enabled:true
        },
        {
          title: '字体(F)...',
          shortcut: '',
          enabled: true,
          handler: function() {
            $dlgFont.show({
              family: np.fontFamily,
              style: np.fontStyle,
              size: np.fontSize,
              okHandler: np.fontHandler
            });
          }
        }
      ],
      width: '156px',
      left: '106px'
    },
    { 
      title: '查看(V)',
      menuItems: [
        {
          title: '状态栏(S)',
          shortcut: '',
          enabled: true
        }
      ],
      width: '138px',
      left: '162px'
    },
    { 
      title: '帮助(H)',
      menuItems: [
        {
          title: '关于记事本(A)',
          shortcut: '',
          enabled: true
        },
      ],
      width: '166px',
      left: '216px'
    }
  ];

  var $bar = $('<div class="notepad-menubar"></div>');
  var menuData,
      menus = [],     
      active = -1;

  function initMenuTitle() {
    var $titles = $('<ul class="menu-title"></ul>');

    for(var i=0; i<menuData.length; i++) {
      var $title = $('<li class="title"></li>');

      $title.html(menuData[i].title);
      $title.attr('data-id', i);
      $titles.append($title);

      $title.click(function(e) {
        var i = Number(this.dataset.id);

        if(active === -1) {
          menus[i].css({ display: 'inline-block' });
          active = i;
        } else if(active !== i) {
          menus[active].css({ display: 'none' });
          menus[i].css({ display: 'inline-block' });
          active = i;
        } else {
          menus[active].css({ display: 'none' });
          active = -1;
        }

        e.stopPropagation();
      });

      $title.hover(function() {
        if(active !== -1) {
          var i = Number(this.dataset.id);
          
          menus[active].css({ display: 'none' });
          menus[i].css({ display: 'inline-block' });
          active = i;
        }
      });
    }

    $bar.append($titles);
  }

  function initMenuList() {
    for(var i=0; i<menuData.length; i++) {
      var $menus = $('<ul class="menus"></ul>'),
          items = menuData[i].menuItems;

      for(var j=0; j<items.length; j++) {
        if(items[j].title === 'hr') {
          var $hr = $('<li class="menu-hr"></li>');
          $menus.append($hr);
          continue;
        }

        var $menu = $('<li class="menu-item"></li>');

        $menu.html(items[j].title);
        $menu.attr('data-x', i);
        $menu.attr('data-y', j);

        if(items[j].shortcut !== '') {
          var $shorcut = $('<span class="shortcut"></span>');

          $shorcut.html(items[j].shortcut);
          $menu.append($shorcut);
        }

        $menus.append($menu);

        $menu.click(function(e) {
          e.stopPropagation();

          if($(this).hasClass('disabled')) return;

          var i = this.dataset.x, j = this.dataset.y;

          menus[i].css({display: 'none'});
          active = -1;

          menuData[i].menuItems[j].handler();
        });
      }

      $menus.css({
        width: menuData[i].width,
        left: menuData[i].left,
        display: 'none'
      });

      $bar.append($menus);
      menus.push($menus);
    }
  }

  function hideMenu() {
    if(active === -1) return;
    menus[active].css({display: 'none'});
    active = -1;
  }

  function init() {
    initMenuTitle();
    initMenuList();

    $('body').append($bar);
  }

  function show(data) {
    menuData = data;
    init();
  }

  return {
    show: show,
    hideMenu: hideMenu
  };
}());

/* exported $editor */
var $editor = (function() {
  var $DOM = $(''
      + '<div class="notepad-editor">'
        + '<textarea spellcheck="false" auto-size="none"></textarea>'
      + '</div>');

  var $textArea = $DOM.find('textarea');
  var cfg = {
    posHandler: null,
    contentHandler: null,
    wrap: false
  };

  function resize(isBig) {
    if(isBig) {
      $DOM.css({bottom: '21px'});
    } else {
      $DOM.css({bottom: '0'});
    }
  }

  function focus() {
    $textArea.focus();
  }
    
  function setWrap(bWrap) {
    if(bWrap) {
      $textArea.attr('wrap', 'soft');
      $textArea.css({'overflow-x': 'hidden'});
    } else {
      $textArea.attr('wrap', 'off');
      $textArea.css({'overflow-x': 'scroll'});
    }
  }
    
  function setFont(e) {
    $textArea.css({'font-family': e.family, 'font-size': e.size + 'pt'});

    if(e.style === '斜体') {
      $textArea.css({'font-style': 'italic'});
      return;
    }
    
    if(e.style === '粗体') {
      $textArea.css({'font-weight': 'bold'});
      return;
    }
    
    if(e.style === '粗偏斜体') {
      $textArea.css({'font-weight': 'bold', 'font-style': 'italic'});
      return;
    }
  }
    
  function show(conf) {
    $.extend(cfg, conf);

    $('body').append($DOM);
    $textArea.trigger('focus');
    setWrap(cfg.wrap);
  }

  return {
    show: show,
    resize: resize,
    focus: focus,
    setWrap: setWrap,
    setFont: setFont
  };
})();

/*global comList*/
/*exported $dlgFont*/
var $dlgFont = (function() {
  var $dlg = $(''
      + '<div class="notepad-dlg-mask notepad-dlg-font">'
        + '<div class="dialogbox notepad-dlgbox">'
          + '<div class="notepad-dlg-titlebar">'
            + '<p class="title">字体</p>'
            + '<span class="close-btn" title="关闭">✖</span>'
          + '</div>'
          + '<div class="main notepad-dlg-main">'
            + '<div class="font-family"><p>字体(F):</p></div>'
            + '<div class="font-style"><p>字形(Y):</p></div>'
            + '<div class="font-size"><p>大小(S):</p></div>'
            + '<fieldset class="sample">'
              + '<legend>示例</legend>'
              + '<p class="sample-txt">AaBbYyZz</p>'
            + '</fieldset>'
            + '<div class="script">'
              + '<label>'
                + '脚本(R):<br>'
                + '<select>'
                  + '<option value="西欧语言">西欧语言</option>'
                  + '<option value="中文 GB2312">中文 GB2312</option>'
                + '</select>'
              + '</label>'
            + '</div>'
            + '<input class="btn-ok btn" type="button" value="确定">'
            + '<input class="btn-cancel btn" type="button" value="取消">'
          + '</div>'
        + '</div>'
      + '</div>');

  var $btnOk = $dlg.find('.btn-ok'),
      $btnClose = $dlg.find('.close-btn'),
      $btnCancel = $dlg.find('.btn-cancel'),
      $sample = $dlg.find('.sample-txt'),
      $titleBar = $dlg.find('.notepad-dlg-titlebar');

  var fonts = ['Agency FB', 'Algerian', 'Arial', 'Arial Rounded MT', 'Axure Handwriting', 'Bahnschrift', 'Baskerville Old Face', 'Bauhaus 93', 'Bell MT', 'Berlin Sans FB', 'Bernard MT', 'BlackAdder ITC'],
      styles = ['常规', '斜体', '粗体', '粗偏斜体'],
      sizes = ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '26', '28', '36', '48', '72'];

  var cfg = {
    family: 'Arial',
    style: '常规',
    size: '16',
    okHandler: null
  };

  function sample() {
    $sample.css({ 'font-family': cfg.family, 'font-size': cfg.size + 'pt' });
    
    if(cfg.style === '常规'){
      $sample.css({'font-style':'normal','font-weight': 'normal'});
      return;
    }

    if(cfg.style === '斜体') {
      $sample.css({'font-style': 'italic'});
      return;
    }

    if(cfg.style === '粗体') {
      $sample.css({'font-weight': 'bold'});
      return;
    }

    if(cfg.style === '粗偏斜体') {
      $sample.css({'font-weight': 'bold', 'font-style': 'italic'});
      return;
    }
  }

  function init() {
    var lstFamily = new comList();
    lstFamily.show({
      container: '.notepad-dlg-font .font-family',
      width: '176px',
      list: fonts,
      select: fonts.indexOf(cfg.family),
      isFont: true,
      selectHandler: function(e) {
        cfg.family = fonts[e];
        sample();
      }
    });

    var lstStyle = new comList();
    lstStyle.show({
      container: '.notepad-dlg-font .font-style',
      width: '132px',
      list: styles,
      select: styles.indexOf(cfg.style),
      isFontStyle: true,
      selectHandler: function(e) {
        cfg.style = styles[e];
        sample();
      }
    });

    var lstSize = new comList();
    lstSize.show({
      container: '.notepad-dlg-font .font-size',
      width: '64px',
      list: sizes,
      select: sizes.indexOf(cfg.size),
      selectHandler: function(e) {
        cfg.size = sizes[e];
        sample();
      }
    });

    sample();
  }

  function destory() { $dlg.remove(); }

  function show(conf) {
    $.extend(cfg, conf);

    $('body').append($dlg);
    init();
    $dlg.find('.dialogbox').draggable({handle: $titleBar});

    $btnClose.click(destory);
    $btnCancel.click(destory);
    $btnOk.click(function() {
      cfg.okHandler({
        family: cfg.family,
        style: cfg.style,
        size: cfg.size
      });

      destory();
    });

    $dlg.click(function(e) {
      e.stopPropagation();
    });
  }

  return {show: show};
}());

/*exported comList*/
function comList() {
  var $comList = $(''
      + '<div class="notepad-com-list">'
        + '<input class="editor" type="text"><br>'
        + '<ul class="list">'
        + '</ul>'
      + '</div>');

  var $editor = $comList.find('.editor'),
      $list = $comList.find('.list'),
      $items;

  var cfg = {
    container: '',
    list: [],
    select: 0,
    width: '200px',
    isFont: false,
    isFontStyle: false,
    selectHandler: null
  };
  
  function setFontStyle(item, style) {
    if(cfg.style === '常规'){
      item.css({'font-style':'normal','font-weight': 'normal'});
      return;
    }
    if(style === '斜体') {
      item.css({'font-style': 'italic'});
      return;
    }

    if(style === '粗体') {
      item.css({'font-weight': 'bold'});
      return;
    }

    if(style === '粗偏斜体') {
      item.css({'font-weight': 'bold', 'font-style': 'italic'});
      return;
    }
  }
  
  function fillData() {
    var i = 0, $item;

    if(cfg.isFont) {
      for(i=0; i<cfg.list.length; i++) {
        $item = $('<li class="item"></li>');
        $item.css({'font-family': cfg.list[i]});
        $list.append($item.html(cfg.list[i]));
      }
    } else if(cfg.isFontStyle) {
      for(i=0; i<cfg.list.length; i++) {
        $item = $('<li class="item"></li>');
        setFontStyle($item, cfg.list[i]);
        $list.append($item.html(cfg.list[i]));
      }
    } else {
      for(i=0; i<cfg.list.length; i++) {
        $item = $('<li class="item"></li>');
        $list.append($item.html(cfg.list[i]));
      }
    }

    $items = $list.find('.item');
  }
  
  function setSelect(n) {
    $($items[n]).addClass('selected');
    $editor.val(cfg.list[n]);
    $editor.select();
  }
  
  function init() {
    var $oldList = $(cfg.container).find('.notepad-com-list');
    if($oldList.length !== 0) $oldList.remove();
     
    $(cfg.container).append($comList);
    
    $comList.css({ width: cfg.width });
    fillData();
    setSelect(cfg.select);
  }
  
  this.show = function(conf) {
    $.extend(cfg, conf);
    init();

    $list.click(function(e) {
      $($items[cfg.select]).removeClass('selected');
      cfg.select = cfg.list.indexOf($(e.target).html());
      $($items[cfg.select]).addClass('selected');
      $editor.val(cfg.list[cfg.select]);
      $editor.select();
      cfg.selectHandler(cfg.select);
    });

    $editor.keyup(function() {
      var i = 0;

      for(i=0; i<cfg.list.length; i++) {
        if(cfg.list[i].indexOf($editor.val()) === 0) break;
      }

      if(i === cfg.list.length) return;

      $items[i].scrollIntoView({behavior: 'smooth', block: 'start'});
      $($items[cfg.select]).removeClass('selected');
      $($items[i]).addClass('selected');
      cfg.select = i;
    });
  };
}
